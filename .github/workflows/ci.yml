# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Build

on:
  workflow_dispatch:
  push:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  cpplint:
    name: cpplint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-cpplint
          path: ~/.cache/pip

      - name: Pyhton
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: cpplint
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade cpplint
          cpplint \
            --repository=. \
            --recursive \
            --filter=-whitespace/line_length,-whitespace/braces,-whitespace/comments,-runtime/indentation_namespace,-whitespace/indent,-readability/braces,-whitespace/newline,-readability/todo,-build/c++11 \
            src

  arduino:
    name: Arduino
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - core: esp32:esp32
            board: esp32:esp32:esp32
            index_url: https://espressif.github.io/arduino-esp32/package_esp32_index.json
          - core: esp32:esp32
            board: esp32:esp32:esp32
            index_url: https://espressif.github.io/arduino-esp32/package_esp32_dev_index.json

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install arduino-cli
        run: curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR=/usr/local/bin sh

      - name: Update core index
        run: arduino-cli core update-index --additional-urls "${{ matrix.index_url }}"

      - name: Install core
        run: arduino-cli core install --additional-urls "${{ matrix.index_url }}" ${{ matrix.core }}

      - name: Install ArduinoJson
        run: arduino-cli lib install ArduinoJson

      - name: Build Read
        run: arduino-cli compile --library . --warnings all -b ${{ matrix.board }} "examples/Read/Read.ino" --build-property build.extra_flags=-DMYCILA_JSON_SUPPORT

      - name: Build ReadAsync
        run: arduino-cli compile --library . --warnings all -b ${{ matrix.board }} "examples/ReadAsync/ReadAsync.ino" --build-property build.extra_flags=-DMYCILA_JSON_SUPPORT

      - name: Build EnergyReset
        run: arduino-cli compile --library . --warnings all -b ${{ matrix.board }} "examples/EnergyReset/EnergyReset.ino" --build-property build.extra_flags=-DMYCILA_JSON_SUPPORT

      - name: Build EnergyResetAsync
        run: arduino-cli compile --library . --warnings all -b ${{ matrix.board }} "examples/EnergyResetAsync/EnergyResetAsync.ino" --build-property build.extra_flags=-DMYCILA_JSON_SUPPORT

      - name: Build SetSpeed
        run: arduino-cli compile --library . --warnings all -b ${{ matrix.board }} "examples/SetSpeed/SetSpeed.ino" --build-property build.extra_flags=-DMYCILA_JSON_SUPPORT

      - name: Build PerfTest1
        run: arduino-cli compile --library . --warnings all -b ${{ matrix.board }} "examples/PerfTest1/PerfTest1.ino" --build-property build.extra_flags=-DMYCILA_JSON_SUPPORT

      - name: Build PerfTest2
        run: arduino-cli compile --library . --warnings all -b ${{ matrix.board }} "examples/PerfTest2/PerfTest2.ino" --build-property build.extra_flags=-DMYCILA_JSON_SUPPORT

      - name: Build Callback
        run: arduino-cli compile --library . --warnings all -b ${{ matrix.board }} "examples/Callback/Callback.ino" --build-property build.extra_flags=-DMYCILA_JSON_SUPPORT

      - name: Build CallbackAsync
        run: arduino-cli compile --library . --warnings all -b ${{ matrix.board }} "examples/CallbackAsync/CallbackAsync.ino" --build-property build.extra_flags=-DMYCILA_JSON_SUPPORT

  platformio:
    name: "pio:${{ matrix.env }}:${{ matrix.board }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # - env: ci-arduino-2
          #   board: esp32dev
          # - env: ci-arduino-2
          #   board: esp32-s2-saola-1
          # - env: ci-arduino-2
          #   board: esp32-s3-devkitc-1
          # - env: ci-arduino-2
          #   board: esp32-c3-devkitc-02

          - env: ci-arduino-3
            board: esp32dev
          - env: ci-arduino-3
            board: esp32-s2-saola-1
          - env: ci-arduino-3
            board: esp32-s3-devkitc-1
          - env: ci-arduino-3
            board: esp32-c3-devkitc-02
          - env: ci-arduino-3
            board: esp32-c6-devkitc-1

          - env: ci-arduino-310rc1
            board: esp32dev
          - env: ci-arduino-310rc1
            board: esp32-s2-saola-1
          - env: ci-arduino-310rc1
            board: esp32-s3-devkitc-1
          - env: ci-arduino-310rc1
            board: esp32-c3-devkitc-02
          - env: ci-arduino-310rc1
            board: esp32-c6-devkitc-1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-pio
          path: |
            ~/.cache/pip
            ~/.platformio

      - name: Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
      
      - name: Build Read
        run: PLATFORMIO_SRC_DIR="examples/Read" PIO_BOARD=${{ matrix.board }} pio run -e ${{ matrix.env }}

      - name: Build ReadAsync
        run: PLATFORMIO_SRC_DIR="examples/ReadAsync" PIO_BOARD=${{ matrix.board }} pio run -e ${{ matrix.env }}

      - name: Build EnergyReset
        run: PLATFORMIO_SRC_DIR="examples/EnergyReset" PIO_BOARD=${{ matrix.board }} pio run -e ${{ matrix.env }}

      - name: Build EnergyResetAsync
        run: PLATFORMIO_SRC_DIR="examples/EnergyResetAsync" PIO_BOARD=${{ matrix.board }} pio run -e ${{ matrix.env }}

      - name: Build SetSpeed
        run: PLATFORMIO_SRC_DIR="examples/SetSpeed" PIO_BOARD=${{ matrix.board }} pio run -e ${{ matrix.env }}

      - name: Build PerfTest1
        run: PLATFORMIO_SRC_DIR="examples/PerfTest1" PIO_BOARD=${{ matrix.board }} pio run -e ${{ matrix.env }}

      - name: Build PerfTest2
        run: PLATFORMIO_SRC_DIR="examples/PerfTest2" PIO_BOARD=${{ matrix.board }} pio run -e ${{ matrix.env }}

      - name: Build Callback
        run: PLATFORMIO_SRC_DIR="examples/Callback" PIO_BOARD=${{ matrix.board }} pio run -e ${{ matrix.env }}

      - name: Build CallbackAsync
        run: PLATFORMIO_SRC_DIR="examples/CallbackAsync" PIO_BOARD=${{ matrix.board }} pio run -e ${{ matrix.env }}

      - name: Build Remote UDP Listener
        run: PIO_BOARD=${{ matrix.board }} pio run -e ci -d examples/RemoteUDP/Listener

  sender:
    name: JSYRemoteUDPSender-${{ matrix.board }}.bin
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board:
          [
            "esp32dev",
            "esp32-s3-devkitc-1",
            "wt32-eth01",
            "esp32s3box",
            "esp32-s2-saola-1",
            "esp32-c3-devkitc-02",
            "esp32-c6-devkitc-1",
            "esp32-poe"
          ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Tags
        run: git fetch --force --tags origin

      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-pio
          path: |
            ~/.cache/pip
            ~/.platformio

      - name: Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
          PIO_BOARD=${{ matrix.board }} pio run -e ci -d examples/RemoteUDP/Sender
          cp examples/RemoteUDP/Sender/.pio/build/ci/firmware.bin ./JSYRemoteUDPSender-${{ matrix.board }}.OTA.bin
          cp examples/RemoteUDP/Sender/.pio/build/ci/firmware.factory.bin ./JSYRemoteUDPSender-${{ matrix.board }}.FACTORY.bin

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.board }}
          if-no-files-found: error
          path: |
            *.bin

  release:
    name: Release
    if: ${{ github.repository_owner == 'mathieucarbou' && github.event_name != 'pull_request' && ( github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') ) }}
    runs-on: ubuntu-latest
    needs: [sender]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Move
        run: |
          ls -R artifacts
          find artifacts -name '*.bin' -exec mv {} artifacts/ \;
    
      - name: Pre-Release
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: mathieucarbou/marvinpinto-action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.ACCESS_TOKEN }}"
          automatic_release_tag: latest
          prerelease: true
          title: Pre-release Builds
          files: |
            artifacts/*.bin
            tools/factory.py

      - name: Changelog
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          failOnError: true
          commitMode: true
          configuration: ".github/workflows/release-notes-config.json"
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - name: Release
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: softprops/action-gh-release@v2
        with:
          body: ${{steps.github_release.outputs.changelog}}
          append_body: true
          draft: false
          files: |
            artifacts/*.bin
            tools/factory.py
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      